{"./":{"url":"./","title":"Introduction","keywords":"","body":"Miaoluna's NoteBook 构建编译 gitbook build ./ ./docs 目录 Vue 初始Vue V指令 Copyright © miaoxxsse.gitbook.io 2021 all right reserved，powered by Gitbook文件修改时间： 2021-01-11 00:08:35 "},"notes/vue/":{"url":"notes/vue/","title":"Vue","keywords":"","body":"Copyright © miaoxxsse.gitbook.io 2021 all right reserved，powered by Gitbook文件修改时间： 2021-01-08 20:43:34 "},"notes/vue/know_vue.html":{"url":"notes/vue/know_vue.html","title":"初始Vue","keywords":"","body":"认识VUE 一、MVVM模式 Model-View-View-Model模式：view和viewmodel的双向绑定 二、vue实例 2.1 生命周期 created：未挂载，$el还不可用 mounted：el挂载上去之后调用 beforeDestroy：实例销毁前 2.2 过滤器 表达式后面可以加 | 做数据过滤，指向过滤函数 2.3 指令 v-前缀，根据表达式的值应用相应的动作 v-bind：动态更新html元素的属性，包括id、class等 v-on：绑定事件监听器 三、计算 计算属性即：表达式是逻辑复杂的语句，可以用函数去写在computed选项内，然后在html的双括号内调用表达式 用法 表达式在双括号中，然后逻辑写在computed中，可以直接function返回值(要带上括号)，也可以写get set方法，会自动调用 计算属性有依赖缓存，依赖的数据发生变化才会重新取值 Copyright © miaoxxsse.gitbook.io 2021 all right reserved，powered by Gitbook文件修改时间： 2021-01-08 20:43:34 "},"notes/vue/v_instruction.html":{"url":"notes/vue/v_instruction.html","title":"V指令","keywords":"","body":"指令-directive v-bind 动态更新HTML元素上的属性： eg: 1. href/src等 v-bind:href=\"url\":等同于:href=\"url\":href属性与url变量关联，随数据变化动态渲染 2. class a) class=\"static\" :class=\"{ 'active': isActive, \"error\": isError}\":根据isActive属性，如果是true，则class是active b) 如果条件太多时，可以用:class=\"classes\"，然后在computed函数块中写 classes 方法，并返回class的key-value对，如下： computed: { classes: function() { return { active: this.isActive, error: this.isError } } } c) 数组表示:class=\"[isActive ? activeClass : '', isError]\",相当于从data中获取isActive和isError对应的value作为class 3. style 内联样式 a):style=\"{ 'color': color, 'footSize: fontSize + 'px' }\" b) 写在data或者computed域中 :style=\"styles\" styles: { color: 'red', fontSize: 14 + 'px' } v-cloak 无作用，编译后删除 网速慢 vue.js 没有加载完之前的带vue语法的文本的显示，可以通过cloak处理掉【vue-router多组件路由加载时不需要这个了】 css: [v-cloak] { display: none } v-once 标记元素/组件及子节点只渲染一次，后续不再随数据双向刷新 => 静态内容 v-if 处于效率会尽可能复用元素，可以用key使得不复用 # eg1: 显示1 显示2 显示 # eg2: ...... v-show 用来控制css的display属性，用法类似v-if，表达式为真时显示元素 v-if：适用条件不经常改变的场景，切换开销较大 v-show：适用频繁切换的条件 v-for 遍历显示，用在循环元素或template标签中 books可以是computed块中的function，返回数组 - 能触发视图刷新的数组方法：push、pop、shift、unshift、splice、sort、reverse -> 修改了原数组 filter、concat、slice方法没有改变原数组，不会出发视图刷新 # eg：set索引触发刷新 Vue.set(app.books, 3, { name: 'asdf', author: 'adf' }); # webpack中（没有导入vue） this.$set(app.books,......) # 另外的方法 app.books.slice(3, 1, { ...... }) v-on 语法糖：v-on:click=\"functionName\" -> @click='count++' 访问原生DOM事件：@click=\"handleClient($event)\" -> $event变量 修饰符支持如下： Copyright © miaoxxsse.gitbook.io 2021 all right reserved，powered by Gitbook文件修改时间： 2021-01-14 00:15:09 "}}